/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.7.0 (NJsonSchema v10.3.9.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class IConfig {
    /* 
      ApiClient.ts
      This is the base classes for the NSwag generated ApiClient. Has overrides for transformOptions and getBaseUrl to allow me to instantiate a client and
      inject firebase authorization tokens into the request header for the back end to then verify and get my own baseUrl stored in a config file.
      A comment at the top of this file will actually break client generation and for whatever reason this will end up at the bottom of Client.ts not the top.
    */
    constructor(token: string) {
        this.JwtToken = token;
    }
    /*
      Returns a valid value for the Authorization header.
      Used to dynamically inject the current auth header.
     */
    JwtToken: string;
}

export class AuthorizedApiBase {
    private readonly config: IConfig;

    protected constructor(config: IConfig) {
        this.config = config;
    }

    protected transformOptions = (options: RequestInit): Promise<RequestInit> => {
        options.headers = {
            ...options.headers,
            Authorization: this.config.JwtToken,
        };
        return Promise.resolve(options);
    };

    protected getBaseUrl = (defaultUrl: string, baseUrl?: string) => {
        const ApiUrl = "";
        return ApiUrl !== undefined ? ApiUrl : defaultUrl;
    };
}

export class Client extends AuthorizedApiBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: IConfig, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * @param metadata (optional) ClientMetadata
     * @return Success getting auth token
     */
    authentication_GetOAuthTokenWithUserInfo(code: string | null, state: string | null, metadata: any | undefined): Promise<TokenUserResponse> {
        let url_ = this.baseUrl + "/auth/token/{code}/{state}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (state === undefined || state === null)
            throw new Error("The parameter 'state' must be defined.");
        url_ = url_.replace("{state}", encodeURIComponent("" + state));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Metadata": metadata !== undefined && metadata !== null ? "" + metadata : "",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuthentication_GetOAuthTokenWithUserInfo(_response);
        });
    }

    protected processAuthentication_GetOAuthTokenWithUserInfo(response: Response): Promise<TokenUserResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenUserResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationResponse.fromJS(resultData400);
            return throwException("Bad request getting auth token", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = UnauthorizedResponse.fromJS(resultData401);
            return throwException("No token provided when getting user info", status, _responseText, _headers, result401);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundResponse.fromJS(resultData404);
            return throwException("Error getting auth token, code provided not found", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Error getting auth token", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TokenUserResponse>(<any>null);
    }

    /**
     * @param metadata (optional) ClientMetadata
     * @return Success getting github redirect url
     */
    authentication_GetLoginRedirectUrl(metadata: any | undefined): Promise<string> {
        let url_ = this.baseUrl + "/auth/login-redirect";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Metadata": metadata !== undefined && metadata !== null ? "" + metadata : "",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuthentication_GetLoginRedirectUrl(_response);
        });
    }

    protected processAuthentication_GetLoginRedirectUrl(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationResponse.fromJS(resultData400);
            return throwException("Bad request getting redirect url", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundResponse.fromJS(resultData404);
            return throwException("Error getting redirect url", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Error getting redirect url", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * @param metadata (optional) ClientMetadata
     * @return Success getting user info
     */
    authentication_GetUserInformationForToken(metadata: any | undefined): Promise<UserInfoResult> {
        let url_ = this.baseUrl + "/auth/user-info";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Metadata": metadata !== undefined && metadata !== null ? "" + metadata : "",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuthentication_GetUserInformationForToken(_response);
        });
    }

    protected processAuthentication_GetUserInformationForToken(response: Response): Promise<UserInfoResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = UnauthorizedResponse.fromJS(resultData401);
            return throwException("No token provided", status, _responseText, _headers, result401);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundResponse.fromJS(resultData404);
            return throwException("User not found", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Error getting user", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfoResult>(<any>null);
    }

    /**
     * @param metadata (optional) ClientMetadata
     * @return Success getting repos
     */
    repository_Repositories(filterOption: RepoFilterOptions, metadata: any | undefined): Promise<Repo[]> {
        let url_ = this.baseUrl + "/repo/{filterOption}";
        if (filterOption === undefined || filterOption === null)
            throw new Error("The parameter 'filterOption' must be defined.");
        url_ = url_.replace("{filterOption}", encodeURIComponent("" + filterOption));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Metadata": metadata !== undefined && metadata !== null ? "" + metadata : "",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRepository_Repositories(_response);
        });
    }

    protected processRepository_Repositories(response: Response): Promise<Repo[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Repo.fromJS(item));
            }
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = UnauthorizedResponse.fromJS(resultData401);
            return throwException("No token provided", status, _responseText, _headers, result401);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundResponse.fromJS(resultData404);
            return throwException("not found", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Error getting repos", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Repo[]>(<any>null);
    }

    /**
     * @param metadata (optional) ClientMetadata
     * @return Success getting repos
     */
    repository_GetComplexityForMethodsInAssembly(metadata: any | undefined, pathToAssembly: string): Promise<{ [key: string]: number; }> {
        let url_ = this.baseUrl + "/repo/TestCyclomaticComplexity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(pathToAssembly);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Metadata": metadata !== undefined && metadata !== null ? "" + metadata : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRepository_GetComplexityForMethodsInAssembly(_response);
        });
    }

    protected processRepository_GetComplexityForMethodsInAssembly(response: Response): Promise<{ [key: string]: number; }> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200![key] = resultData200[key];
                }
            }
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = UnauthorizedResponse.fromJS(resultData401);
            return throwException("No token provided", status, _responseText, _headers, result401);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundResponse.fromJS(resultData404);
            return throwException("not found", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Error getting repos", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<{ [key: string]: number; }>(<any>null);
    }
}

export class TokenUserResponse implements ITokenUserResponse {
    accessToken?: string | undefined;
    user?: User | undefined;

    constructor(data?: ITokenUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TokenUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITokenUserResponse {
    accessToken?: string | undefined;
    user?: User | undefined;
}

export abstract class Account implements IAccount {
    avatarUrl?: string | undefined;
    bio?: string | undefined;
    blog?: string | undefined;
    collaborators?: number | undefined;
    company?: string | undefined;
    createdAt?: Date;
    diskUsage?: number | undefined;
    email?: string | undefined;
    followers?: number;
    following?: number;
    hireable?: boolean | undefined;
    htmlUrl?: string | undefined;
    id?: number;
    nodeId?: string | undefined;
    location?: string | undefined;
    login?: string | undefined;
    name?: string | undefined;
    type?: AccountType | undefined;
    ownedPrivateRepos?: number;
    plan?: Plan | undefined;
    privateGists?: number | undefined;
    publicGists?: number;
    publicRepos?: number;
    totalPrivateRepos?: number;
    url?: string | undefined;

    constructor(data?: IAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.avatarUrl = _data["avatarUrl"];
            this.bio = _data["bio"];
            this.blog = _data["blog"];
            this.collaborators = _data["collaborators"];
            this.company = _data["company"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.diskUsage = _data["diskUsage"];
            this.email = _data["email"];
            this.followers = _data["followers"];
            this.following = _data["following"];
            this.hireable = _data["hireable"];
            this.htmlUrl = _data["htmlUrl"];
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.location = _data["location"];
            this.login = _data["login"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.ownedPrivateRepos = _data["ownedPrivateRepos"];
            this.plan = _data["plan"] ? Plan.fromJS(_data["plan"]) : <any>undefined;
            this.privateGists = _data["privateGists"];
            this.publicGists = _data["publicGists"];
            this.publicRepos = _data["publicRepos"];
            this.totalPrivateRepos = _data["totalPrivateRepos"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Account {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Account' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["avatarUrl"] = this.avatarUrl;
        data["bio"] = this.bio;
        data["blog"] = this.blog;
        data["collaborators"] = this.collaborators;
        data["company"] = this.company;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["diskUsage"] = this.diskUsage;
        data["email"] = this.email;
        data["followers"] = this.followers;
        data["following"] = this.following;
        data["hireable"] = this.hireable;
        data["htmlUrl"] = this.htmlUrl;
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["location"] = this.location;
        data["login"] = this.login;
        data["name"] = this.name;
        data["type"] = this.type;
        data["ownedPrivateRepos"] = this.ownedPrivateRepos;
        data["plan"] = this.plan ? this.plan.toJSON() : <any>undefined;
        data["privateGists"] = this.privateGists;
        data["publicGists"] = this.publicGists;
        data["publicRepos"] = this.publicRepos;
        data["totalPrivateRepos"] = this.totalPrivateRepos;
        data["url"] = this.url;
        return data; 
    }
}

export interface IAccount {
    avatarUrl?: string | undefined;
    bio?: string | undefined;
    blog?: string | undefined;
    collaborators?: number | undefined;
    company?: string | undefined;
    createdAt?: Date;
    diskUsage?: number | undefined;
    email?: string | undefined;
    followers?: number;
    following?: number;
    hireable?: boolean | undefined;
    htmlUrl?: string | undefined;
    id?: number;
    nodeId?: string | undefined;
    location?: string | undefined;
    login?: string | undefined;
    name?: string | undefined;
    type?: AccountType | undefined;
    ownedPrivateRepos?: number;
    plan?: Plan | undefined;
    privateGists?: number | undefined;
    publicGists?: number;
    publicRepos?: number;
    totalPrivateRepos?: number;
    url?: string | undefined;
}

export class User extends Account implements IUser {
    permissions?: RepositoryPermissions | undefined;
    siteAdmin?: boolean;
    suspendedAt?: Date | undefined;
    suspended?: boolean;
    ldapDistinguishedName?: string | undefined;
    updatedAt?: Date;

    constructor(data?: IUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.permissions = _data["permissions"] ? RepositoryPermissions.fromJS(_data["permissions"]) : <any>undefined;
            this.siteAdmin = _data["siteAdmin"];
            this.suspendedAt = _data["suspendedAt"] ? new Date(_data["suspendedAt"].toString()) : <any>undefined;
            this.suspended = _data["suspended"];
            this.ldapDistinguishedName = _data["ldapDistinguishedName"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissions"] = this.permissions ? this.permissions.toJSON() : <any>undefined;
        data["siteAdmin"] = this.siteAdmin;
        data["suspendedAt"] = this.suspendedAt ? this.suspendedAt.toISOString() : <any>undefined;
        data["suspended"] = this.suspended;
        data["ldapDistinguishedName"] = this.ldapDistinguishedName;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IUser extends IAccount {
    permissions?: RepositoryPermissions | undefined;
    siteAdmin?: boolean;
    suspendedAt?: Date | undefined;
    suspended?: boolean;
    ldapDistinguishedName?: string | undefined;
    updatedAt?: Date;
}

export class RepositoryPermissions implements IRepositoryPermissions {
    admin?: boolean;
    push?: boolean;
    pull?: boolean;

    constructor(data?: IRepositoryPermissions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.admin = _data["admin"];
            this.push = _data["push"];
            this.pull = _data["pull"];
        }
    }

    static fromJS(data: any): RepositoryPermissions {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryPermissions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["admin"] = this.admin;
        data["push"] = this.push;
        data["pull"] = this.pull;
        return data; 
    }
}

export interface IRepositoryPermissions {
    admin?: boolean;
    push?: boolean;
    pull?: boolean;
}

export enum AccountType {
    User = 0,
    Organization = 1,
    Bot = 2,
}

export class Plan implements IPlan {
    collaborators?: number;
    name?: string | undefined;
    privateRepos?: number;
    space?: number;
    billingEmail?: string | undefined;

    constructor(data?: IPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.collaborators = _data["collaborators"];
            this.name = _data["name"];
            this.privateRepos = _data["privateRepos"];
            this.space = _data["space"];
            this.billingEmail = _data["billingEmail"];
        }
    }

    static fromJS(data: any): Plan {
        data = typeof data === 'object' ? data : {};
        let result = new Plan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collaborators"] = this.collaborators;
        data["name"] = this.name;
        data["privateRepos"] = this.privateRepos;
        data["space"] = this.space;
        data["billingEmail"] = this.billingEmail;
        return data; 
    }
}

export interface IPlan {
    collaborators?: number;
    name?: string | undefined;
    privateRepos?: number;
    space?: number;
    billingEmail?: string | undefined;
}

export abstract class BaseResponse implements IBaseResponse {
    message?: string | undefined;
    title?: string | undefined;

    constructor(data?: IBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): BaseResponse {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseResponse' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["title"] = this.title;
        return data; 
    }
}

export interface IBaseResponse {
    message?: string | undefined;
    title?: string | undefined;
}

export class ValidationResponse extends BaseResponse implements IValidationResponse {
    validationErrors?: { [key: string]: string; } | undefined;

    constructor(data?: IValidationResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["validationErrors"]) {
                this.validationErrors = {} as any;
                for (let key in _data["validationErrors"]) {
                    if (_data["validationErrors"].hasOwnProperty(key))
                        this.validationErrors![key] = _data["validationErrors"][key];
                }
            }
        }
    }

    static fromJS(data: any): ValidationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.validationErrors) {
            data["validationErrors"] = {};
            for (let key in this.validationErrors) {
                if (this.validationErrors.hasOwnProperty(key))
                    data["validationErrors"][key] = this.validationErrors[key];
            }
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IValidationResponse extends IBaseResponse {
    validationErrors?: { [key: string]: string; } | undefined;
}

export class UnauthorizedResponse extends BaseResponse implements IUnauthorizedResponse {

    constructor(data?: IUnauthorizedResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): UnauthorizedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UnauthorizedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IUnauthorizedResponse extends IBaseResponse {
}

export class NotFoundResponse extends BaseResponse implements INotFoundResponse {
    badProperties?: { [key: string]: string; } | undefined;

    constructor(data?: INotFoundResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["badProperties"]) {
                this.badProperties = {} as any;
                for (let key in _data["badProperties"]) {
                    if (_data["badProperties"].hasOwnProperty(key))
                        this.badProperties![key] = _data["badProperties"][key];
                }
            }
        }
    }

    static fromJS(data: any): NotFoundResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NotFoundResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.badProperties) {
            data["badProperties"] = {};
            for (let key in this.badProperties) {
                if (this.badProperties.hasOwnProperty(key))
                    data["badProperties"][key] = this.badProperties[key];
            }
        }
        super.toJSON(data);
        return data; 
    }
}

export interface INotFoundResponse extends IBaseResponse {
    badProperties?: { [key: string]: string; } | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                this.extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        this.extensions![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

export class UserInfoResult implements IUserInfoResult {
    user?: User | undefined;
    loginRedirectUrl?: string | undefined;

    constructor(data?: IUserInfoResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
            this.loginRedirectUrl = _data["loginRedirectUrl"];
        }
    }

    static fromJS(data: any): UserInfoResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["loginRedirectUrl"] = this.loginRedirectUrl;
        return data; 
    }
}

export interface IUserInfoResult {
    user?: User | undefined;
    loginRedirectUrl?: string | undefined;
}

export class Repo implements IRepo {
    name?: string | undefined;
    description?: string | undefined;
    masterCommits?: Commit[] | undefined;

    constructor(data?: IRepo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            if (Array.isArray(_data["masterCommits"])) {
                this.masterCommits = [] as any;
                for (let item of _data["masterCommits"])
                    this.masterCommits!.push(Commit.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Repo {
        data = typeof data === 'object' ? data : {};
        let result = new Repo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        if (Array.isArray(this.masterCommits)) {
            data["masterCommits"] = [];
            for (let item of this.masterCommits)
                data["masterCommits"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRepo {
    name?: string | undefined;
    description?: string | undefined;
    masterCommits?: Commit[] | undefined;
}

export class QueryableValueOfCommit implements IQueryableValueOfCommit {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfCommit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfCommit {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfCommit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfCommit {
    expression?: Expression | undefined;
}

export class Commit extends QueryableValueOfCommit implements ICommit {
    abbreviatedOid?: string | undefined;
    additions?: number;
    author?: GitActor | undefined;
    authoredByCommitter?: boolean;
    authoredDate?: Date;
    changedFiles?: number;
    commitResourcePath?: string | undefined;
    commitUrl?: string | undefined;
    committedDate?: Date;
    committedViaWeb?: boolean;
    committer?: GitActor | undefined;
    deletions?: number;
    id?: ID;
    message?: string | undefined;
    messageBody?: string | undefined;
    messageBodyHTML?: string | undefined;
    messageHeadline?: string | undefined;
    messageHeadlineHTML?: string | undefined;
    oid?: string | undefined;
    onBehalfOf?: Organization | undefined;
    pushedDate?: Date | undefined;
    repository?: Repository | undefined;
    resourcePath?: string | undefined;
    signature?: IGitSignature | undefined;
    status?: Status | undefined;
    statusCheckRollup?: StatusCheckRollup | undefined;
    tarballUrl?: string | undefined;
    tree?: Tree | undefined;
    treeResourcePath?: string | undefined;
    treeUrl?: string | undefined;
    url?: string | undefined;
    viewerCanSubscribe?: boolean;
    viewerSubscription?: SubscriptionState | undefined;
    zipballUrl?: string | undefined;

    constructor(data?: ICommit) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.abbreviatedOid = _data["abbreviatedOid"];
            this.additions = _data["additions"];
            this.author = _data["author"] ? GitActor.fromJS(_data["author"]) : <any>undefined;
            this.authoredByCommitter = _data["authoredByCommitter"];
            this.authoredDate = _data["authoredDate"] ? new Date(_data["authoredDate"].toString()) : <any>undefined;
            this.changedFiles = _data["changedFiles"];
            this.commitResourcePath = _data["commitResourcePath"];
            this.commitUrl = _data["commitUrl"];
            this.committedDate = _data["committedDate"] ? new Date(_data["committedDate"].toString()) : <any>undefined;
            this.committedViaWeb = _data["committedViaWeb"];
            this.committer = _data["committer"] ? GitActor.fromJS(_data["committer"]) : <any>undefined;
            this.deletions = _data["deletions"];
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.message = _data["message"];
            this.messageBody = _data["messageBody"];
            this.messageBodyHTML = _data["messageBodyHTML"];
            this.messageHeadline = _data["messageHeadline"];
            this.messageHeadlineHTML = _data["messageHeadlineHTML"];
            this.oid = _data["oid"];
            this.onBehalfOf = _data["onBehalfOf"] ? Organization.fromJS(_data["onBehalfOf"]) : <any>undefined;
            this.pushedDate = _data["pushedDate"] ? new Date(_data["pushedDate"].toString()) : <any>undefined;
            this.repository = _data["repository"] ? Repository.fromJS(_data["repository"]) : <any>undefined;
            this.resourcePath = _data["resourcePath"];
            this.signature = _data["signature"] ? IGitSignature.fromJS(_data["signature"]) : <any>undefined;
            this.status = _data["status"] ? Status.fromJS(_data["status"]) : <any>undefined;
            this.statusCheckRollup = _data["statusCheckRollup"] ? StatusCheckRollup.fromJS(_data["statusCheckRollup"]) : <any>undefined;
            this.tarballUrl = _data["tarballUrl"];
            this.tree = _data["tree"] ? Tree.fromJS(_data["tree"]) : <any>undefined;
            this.treeResourcePath = _data["treeResourcePath"];
            this.treeUrl = _data["treeUrl"];
            this.url = _data["url"];
            this.viewerCanSubscribe = _data["viewerCanSubscribe"];
            this.viewerSubscription = _data["viewerSubscription"];
            this.zipballUrl = _data["zipballUrl"];
        }
    }

    static fromJS(data: any): Commit {
        data = typeof data === 'object' ? data : {};
        let result = new Commit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["abbreviatedOid"] = this.abbreviatedOid;
        data["additions"] = this.additions;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["authoredByCommitter"] = this.authoredByCommitter;
        data["authoredDate"] = this.authoredDate ? this.authoredDate.toISOString() : <any>undefined;
        data["changedFiles"] = this.changedFiles;
        data["commitResourcePath"] = this.commitResourcePath;
        data["commitUrl"] = this.commitUrl;
        data["committedDate"] = this.committedDate ? this.committedDate.toISOString() : <any>undefined;
        data["committedViaWeb"] = this.committedViaWeb;
        data["committer"] = this.committer ? this.committer.toJSON() : <any>undefined;
        data["deletions"] = this.deletions;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["messageBody"] = this.messageBody;
        data["messageBodyHTML"] = this.messageBodyHTML;
        data["messageHeadline"] = this.messageHeadline;
        data["messageHeadlineHTML"] = this.messageHeadlineHTML;
        data["oid"] = this.oid;
        data["onBehalfOf"] = this.onBehalfOf ? this.onBehalfOf.toJSON() : <any>undefined;
        data["pushedDate"] = this.pushedDate ? this.pushedDate.toISOString() : <any>undefined;
        data["repository"] = this.repository ? this.repository.toJSON() : <any>undefined;
        data["resourcePath"] = this.resourcePath;
        data["signature"] = this.signature ? this.signature.toJSON() : <any>undefined;
        data["status"] = this.status ? this.status.toJSON() : <any>undefined;
        data["statusCheckRollup"] = this.statusCheckRollup ? this.statusCheckRollup.toJSON() : <any>undefined;
        data["tarballUrl"] = this.tarballUrl;
        data["tree"] = this.tree ? this.tree.toJSON() : <any>undefined;
        data["treeResourcePath"] = this.treeResourcePath;
        data["treeUrl"] = this.treeUrl;
        data["url"] = this.url;
        data["viewerCanSubscribe"] = this.viewerCanSubscribe;
        data["viewerSubscription"] = this.viewerSubscription;
        data["zipballUrl"] = this.zipballUrl;
        super.toJSON(data);
        return data; 
    }
}

export interface ICommit extends IQueryableValueOfCommit {
    abbreviatedOid?: string | undefined;
    additions?: number;
    author?: GitActor | undefined;
    authoredByCommitter?: boolean;
    authoredDate?: Date;
    changedFiles?: number;
    commitResourcePath?: string | undefined;
    commitUrl?: string | undefined;
    committedDate?: Date;
    committedViaWeb?: boolean;
    committer?: GitActor | undefined;
    deletions?: number;
    id?: ID;
    message?: string | undefined;
    messageBody?: string | undefined;
    messageBodyHTML?: string | undefined;
    messageHeadline?: string | undefined;
    messageHeadlineHTML?: string | undefined;
    oid?: string | undefined;
    onBehalfOf?: Organization | undefined;
    pushedDate?: Date | undefined;
    repository?: Repository | undefined;
    resourcePath?: string | undefined;
    signature?: IGitSignature | undefined;
    status?: Status | undefined;
    statusCheckRollup?: StatusCheckRollup | undefined;
    tarballUrl?: string | undefined;
    tree?: Tree | undefined;
    treeResourcePath?: string | undefined;
    treeUrl?: string | undefined;
    url?: string | undefined;
    viewerCanSubscribe?: boolean;
    viewerSubscription?: SubscriptionState | undefined;
    zipballUrl?: string | undefined;
}

export class QueryableValueOfGitActor implements IQueryableValueOfGitActor {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfGitActor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfGitActor {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfGitActor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfGitActor {
    expression?: Expression | undefined;
}

export class GitActor extends QueryableValueOfGitActor implements IGitActor {
    date?: string | undefined;
    email?: string | undefined;
    name?: string | undefined;
    user?: User2 | undefined;

    constructor(data?: IGitActor) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.date = _data["date"];
            this.email = _data["email"];
            this.name = _data["name"];
            this.user = _data["user"] ? User2.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GitActor {
        data = typeof data === 'object' ? data : {};
        let result = new GitActor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["email"] = this.email;
        data["name"] = this.name;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IGitActor extends IQueryableValueOfGitActor {
    date?: string | undefined;
    email?: string | undefined;
    name?: string | undefined;
    user?: User2 | undefined;
}

export class QueryableValueOfUser implements IQueryableValueOfUser {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfUser {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfUser {
    expression?: Expression | undefined;
}

export class User2 extends QueryableValueOfUser implements IUser2 {
    bio?: string | undefined;
    bioHTML?: string | undefined;
    company?: string | undefined;
    companyHTML?: string | undefined;
    createdAt?: Date;
    databaseId?: number | undefined;
    email?: string | undefined;
    id?: ID;
    isBountyHunter?: boolean;
    isCampusExpert?: boolean;
    isDeveloperProgramMember?: boolean;
    isEmployee?: boolean;
    isHireable?: boolean;
    isSiteAdmin?: boolean;
    isViewer?: boolean;
    itemShowcase?: ProfileItemShowcase | undefined;
    location?: string | undefined;
    login?: string | undefined;
    name?: string | undefined;
    pinnedItemsRemaining?: number;
    projectsResourcePath?: string | undefined;
    projectsUrl?: string | undefined;
    resourcePath?: string | undefined;
    sponsorsListing?: SponsorsListing | undefined;
    status?: UserStatus | undefined;
    twitterUsername?: string | undefined;
    updatedAt?: Date;
    url?: string | undefined;
    viewerCanChangePinnedItems?: boolean;
    viewerCanCreateProjects?: boolean;
    viewerCanFollow?: boolean;
    viewerIsFollowing?: boolean;
    websiteUrl?: string | undefined;

    constructor(data?: IUser2) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.bio = _data["bio"];
            this.bioHTML = _data["bioHTML"];
            this.company = _data["company"];
            this.companyHTML = _data["companyHTML"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.databaseId = _data["databaseId"];
            this.email = _data["email"];
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.isBountyHunter = _data["isBountyHunter"];
            this.isCampusExpert = _data["isCampusExpert"];
            this.isDeveloperProgramMember = _data["isDeveloperProgramMember"];
            this.isEmployee = _data["isEmployee"];
            this.isHireable = _data["isHireable"];
            this.isSiteAdmin = _data["isSiteAdmin"];
            this.isViewer = _data["isViewer"];
            this.itemShowcase = _data["itemShowcase"] ? ProfileItemShowcase.fromJS(_data["itemShowcase"]) : <any>undefined;
            this.location = _data["location"];
            this.login = _data["login"];
            this.name = _data["name"];
            this.pinnedItemsRemaining = _data["pinnedItemsRemaining"];
            this.projectsResourcePath = _data["projectsResourcePath"];
            this.projectsUrl = _data["projectsUrl"];
            this.resourcePath = _data["resourcePath"];
            this.sponsorsListing = _data["sponsorsListing"] ? SponsorsListing.fromJS(_data["sponsorsListing"]) : <any>undefined;
            this.status = _data["status"] ? UserStatus.fromJS(_data["status"]) : <any>undefined;
            this.twitterUsername = _data["twitterUsername"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.url = _data["url"];
            this.viewerCanChangePinnedItems = _data["viewerCanChangePinnedItems"];
            this.viewerCanCreateProjects = _data["viewerCanCreateProjects"];
            this.viewerCanFollow = _data["viewerCanFollow"];
            this.viewerIsFollowing = _data["viewerIsFollowing"];
            this.websiteUrl = _data["websiteUrl"];
        }
    }

    static fromJS(data: any): User2 {
        data = typeof data === 'object' ? data : {};
        let result = new User2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bio"] = this.bio;
        data["bioHTML"] = this.bioHTML;
        data["company"] = this.company;
        data["companyHTML"] = this.companyHTML;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["databaseId"] = this.databaseId;
        data["email"] = this.email;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["isBountyHunter"] = this.isBountyHunter;
        data["isCampusExpert"] = this.isCampusExpert;
        data["isDeveloperProgramMember"] = this.isDeveloperProgramMember;
        data["isEmployee"] = this.isEmployee;
        data["isHireable"] = this.isHireable;
        data["isSiteAdmin"] = this.isSiteAdmin;
        data["isViewer"] = this.isViewer;
        data["itemShowcase"] = this.itemShowcase ? this.itemShowcase.toJSON() : <any>undefined;
        data["location"] = this.location;
        data["login"] = this.login;
        data["name"] = this.name;
        data["pinnedItemsRemaining"] = this.pinnedItemsRemaining;
        data["projectsResourcePath"] = this.projectsResourcePath;
        data["projectsUrl"] = this.projectsUrl;
        data["resourcePath"] = this.resourcePath;
        data["sponsorsListing"] = this.sponsorsListing ? this.sponsorsListing.toJSON() : <any>undefined;
        data["status"] = this.status ? this.status.toJSON() : <any>undefined;
        data["twitterUsername"] = this.twitterUsername;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["url"] = this.url;
        data["viewerCanChangePinnedItems"] = this.viewerCanChangePinnedItems;
        data["viewerCanCreateProjects"] = this.viewerCanCreateProjects;
        data["viewerCanFollow"] = this.viewerCanFollow;
        data["viewerIsFollowing"] = this.viewerIsFollowing;
        data["websiteUrl"] = this.websiteUrl;
        super.toJSON(data);
        return data; 
    }
}

export interface IUser2 extends IQueryableValueOfUser {
    bio?: string | undefined;
    bioHTML?: string | undefined;
    company?: string | undefined;
    companyHTML?: string | undefined;
    createdAt?: Date;
    databaseId?: number | undefined;
    email?: string | undefined;
    id?: ID;
    isBountyHunter?: boolean;
    isCampusExpert?: boolean;
    isDeveloperProgramMember?: boolean;
    isEmployee?: boolean;
    isHireable?: boolean;
    isSiteAdmin?: boolean;
    isViewer?: boolean;
    itemShowcase?: ProfileItemShowcase | undefined;
    location?: string | undefined;
    login?: string | undefined;
    name?: string | undefined;
    pinnedItemsRemaining?: number;
    projectsResourcePath?: string | undefined;
    projectsUrl?: string | undefined;
    resourcePath?: string | undefined;
    sponsorsListing?: SponsorsListing | undefined;
    status?: UserStatus | undefined;
    twitterUsername?: string | undefined;
    updatedAt?: Date;
    url?: string | undefined;
    viewerCanChangePinnedItems?: boolean;
    viewerCanCreateProjects?: boolean;
    viewerCanFollow?: boolean;
    viewerIsFollowing?: boolean;
    websiteUrl?: string | undefined;
}

export class ID implements IID {
    value?: string | undefined;

    constructor(data?: IID) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ID {
        data = typeof data === 'object' ? data : {};
        let result = new ID();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data; 
    }
}

export interface IID {
    value?: string | undefined;
}

export class QueryableValueOfProfileItemShowcase implements IQueryableValueOfProfileItemShowcase {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfProfileItemShowcase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfProfileItemShowcase {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfProfileItemShowcase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfProfileItemShowcase {
    expression?: Expression | undefined;
}

export class ProfileItemShowcase extends QueryableValueOfProfileItemShowcase implements IProfileItemShowcase {
    hasPinnedItems?: boolean;

    constructor(data?: IProfileItemShowcase) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.hasPinnedItems = _data["hasPinnedItems"];
        }
    }

    static fromJS(data: any): ProfileItemShowcase {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileItemShowcase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasPinnedItems"] = this.hasPinnedItems;
        super.toJSON(data);
        return data; 
    }
}

export interface IProfileItemShowcase extends IQueryableValueOfProfileItemShowcase {
    hasPinnedItems?: boolean;
}

export abstract class Expression implements IExpression {
    nodeType?: ExpressionType;
    type?: string;
    canReduce?: boolean;

    constructor(data?: IExpression) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeType = _data["nodeType"];
            this.type = _data["type"];
            this.canReduce = _data["canReduce"];
        }
    }

    static fromJS(data: any): Expression {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Expression' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeType"] = this.nodeType;
        data["type"] = this.type;
        data["canReduce"] = this.canReduce;
        return data; 
    }
}

export interface IExpression {
    nodeType?: ExpressionType;
    type?: string;
    canReduce?: boolean;
}

export enum ExpressionType {
    Add = 0,
    AddChecked = 1,
    And = 2,
    AndAlso = 3,
    ArrayLength = 4,
    ArrayIndex = 5,
    Call = 6,
    Coalesce = 7,
    Conditional = 8,
    Constant = 9,
    Convert = 10,
    ConvertChecked = 11,
    Divide = 12,
    Equal = 13,
    ExclusiveOr = 14,
    GreaterThan = 15,
    GreaterThanOrEqual = 16,
    Invoke = 17,
    Lambda = 18,
    LeftShift = 19,
    LessThan = 20,
    LessThanOrEqual = 21,
    ListInit = 22,
    MemberAccess = 23,
    MemberInit = 24,
    Modulo = 25,
    Multiply = 26,
    MultiplyChecked = 27,
    Negate = 28,
    UnaryPlus = 29,
    NegateChecked = 30,
    New = 31,
    NewArrayInit = 32,
    NewArrayBounds = 33,
    Not = 34,
    NotEqual = 35,
    Or = 36,
    OrElse = 37,
    Parameter = 38,
    Power = 39,
    Quote = 40,
    RightShift = 41,
    Subtract = 42,
    SubtractChecked = 43,
    TypeAs = 44,
    TypeIs = 45,
    Assign = 46,
    Block = 47,
    DebugInfo = 48,
    Decrement = 49,
    Dynamic = 50,
    Default = 51,
    Extension = 52,
    Goto = 53,
    Increment = 54,
    Index = 55,
    Label = 56,
    RuntimeVariables = 57,
    Loop = 58,
    Switch = 59,
    Throw = 60,
    Try = 61,
    Unbox = 62,
    AddAssign = 63,
    AndAssign = 64,
    DivideAssign = 65,
    ExclusiveOrAssign = 66,
    LeftShiftAssign = 67,
    ModuloAssign = 68,
    MultiplyAssign = 69,
    OrAssign = 70,
    PowerAssign = 71,
    RightShiftAssign = 72,
    SubtractAssign = 73,
    AddAssignChecked = 74,
    MultiplyAssignChecked = 75,
    SubtractAssignChecked = 76,
    PreIncrementAssign = 77,
    PreDecrementAssign = 78,
    PostIncrementAssign = 79,
    PostDecrementAssign = 80,
    TypeEqual = 81,
    OnesComplement = 82,
    IsTrue = 83,
    IsFalse = 84,
}

export class QueryableValueOfSponsorsListing implements IQueryableValueOfSponsorsListing {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfSponsorsListing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfSponsorsListing {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfSponsorsListing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfSponsorsListing {
    expression?: Expression | undefined;
}

export class SponsorsListing extends QueryableValueOfSponsorsListing implements ISponsorsListing {
    createdAt?: Date;
    fullDescription?: string | undefined;
    fullDescriptionHTML?: string | undefined;
    id?: ID;
    name?: string | undefined;
    shortDescription?: string | undefined;
    slug?: string | undefined;

    constructor(data?: ISponsorsListing) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.fullDescription = _data["fullDescription"];
            this.fullDescriptionHTML = _data["fullDescriptionHTML"];
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.name = _data["name"];
            this.shortDescription = _data["shortDescription"];
            this.slug = _data["slug"];
        }
    }

    static fromJS(data: any): SponsorsListing {
        data = typeof data === 'object' ? data : {};
        let result = new SponsorsListing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["fullDescription"] = this.fullDescription;
        data["fullDescriptionHTML"] = this.fullDescriptionHTML;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["shortDescription"] = this.shortDescription;
        data["slug"] = this.slug;
        super.toJSON(data);
        return data; 
    }
}

export interface ISponsorsListing extends IQueryableValueOfSponsorsListing {
    createdAt?: Date;
    fullDescription?: string | undefined;
    fullDescriptionHTML?: string | undefined;
    id?: ID;
    name?: string | undefined;
    shortDescription?: string | undefined;
    slug?: string | undefined;
}

export class QueryableValueOfUserStatus implements IQueryableValueOfUserStatus {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfUserStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfUserStatus {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfUserStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfUserStatus {
    expression?: Expression | undefined;
}

export class UserStatus extends QueryableValueOfUserStatus implements IUserStatus {
    createdAt?: Date;
    emoji?: string | undefined;
    emojiHTML?: string | undefined;
    expiresAt?: Date | undefined;
    id?: ID;
    indicatesLimitedAvailability?: boolean;
    message?: string | undefined;
    organization?: Organization | undefined;
    updatedAt?: Date;
    user?: User2 | undefined;

    constructor(data?: IUserStatus) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.emoji = _data["emoji"];
            this.emojiHTML = _data["emojiHTML"];
            this.expiresAt = _data["expiresAt"] ? new Date(_data["expiresAt"].toString()) : <any>undefined;
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.indicatesLimitedAvailability = _data["indicatesLimitedAvailability"];
            this.message = _data["message"];
            this.organization = _data["organization"] ? Organization.fromJS(_data["organization"]) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.user = _data["user"] ? User2.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserStatus {
        data = typeof data === 'object' ? data : {};
        let result = new UserStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["emoji"] = this.emoji;
        data["emojiHTML"] = this.emojiHTML;
        data["expiresAt"] = this.expiresAt ? this.expiresAt.toISOString() : <any>undefined;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["indicatesLimitedAvailability"] = this.indicatesLimitedAvailability;
        data["message"] = this.message;
        data["organization"] = this.organization ? this.organization.toJSON() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IUserStatus extends IQueryableValueOfUserStatus {
    createdAt?: Date;
    emoji?: string | undefined;
    emojiHTML?: string | undefined;
    expiresAt?: Date | undefined;
    id?: ID;
    indicatesLimitedAvailability?: boolean;
    message?: string | undefined;
    organization?: Organization | undefined;
    updatedAt?: Date;
    user?: User2 | undefined;
}

export class QueryableValueOfOrganization implements IQueryableValueOfOrganization {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfOrganization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfOrganization {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfOrganization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfOrganization {
    expression?: Expression | undefined;
}

export class Organization extends QueryableValueOfOrganization implements IOrganization {
    createdAt?: Date;
    databaseId?: number | undefined;
    description?: string | undefined;
    descriptionHTML?: string | undefined;
    email?: string | undefined;
    id?: ID;
    ipAllowListEnabledSetting?: IpAllowListEnabledSettingValue;
    isVerified?: boolean;
    itemShowcase?: ProfileItemShowcase | undefined;
    location?: string | undefined;
    login?: string | undefined;
    name?: string | undefined;
    newTeamResourcePath?: string | undefined;
    newTeamUrl?: string | undefined;
    organizationBillingEmail?: string | undefined;
    pinnedItemsRemaining?: number;
    projectsResourcePath?: string | undefined;
    projectsUrl?: string | undefined;
    requiresTwoFactorAuthentication?: boolean | undefined;
    resourcePath?: string | undefined;
    samlIdentityProvider?: OrganizationIdentityProvider | undefined;
    sponsorsListing?: SponsorsListing | undefined;
    teamsResourcePath?: string | undefined;
    teamsUrl?: string | undefined;
    twitterUsername?: string | undefined;
    updatedAt?: Date;
    url?: string | undefined;
    viewerCanAdminister?: boolean;
    viewerCanChangePinnedItems?: boolean;
    viewerCanCreateProjects?: boolean;
    viewerCanCreateRepositories?: boolean;
    viewerCanCreateTeams?: boolean;
    viewerIsAMember?: boolean;
    websiteUrl?: string | undefined;

    constructor(data?: IOrganization) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.databaseId = _data["databaseId"];
            this.description = _data["description"];
            this.descriptionHTML = _data["descriptionHTML"];
            this.email = _data["email"];
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.ipAllowListEnabledSetting = _data["ipAllowListEnabledSetting"];
            this.isVerified = _data["isVerified"];
            this.itemShowcase = _data["itemShowcase"] ? ProfileItemShowcase.fromJS(_data["itemShowcase"]) : <any>undefined;
            this.location = _data["location"];
            this.login = _data["login"];
            this.name = _data["name"];
            this.newTeamResourcePath = _data["newTeamResourcePath"];
            this.newTeamUrl = _data["newTeamUrl"];
            this.organizationBillingEmail = _data["organizationBillingEmail"];
            this.pinnedItemsRemaining = _data["pinnedItemsRemaining"];
            this.projectsResourcePath = _data["projectsResourcePath"];
            this.projectsUrl = _data["projectsUrl"];
            this.requiresTwoFactorAuthentication = _data["requiresTwoFactorAuthentication"];
            this.resourcePath = _data["resourcePath"];
            this.samlIdentityProvider = _data["samlIdentityProvider"] ? OrganizationIdentityProvider.fromJS(_data["samlIdentityProvider"]) : <any>undefined;
            this.sponsorsListing = _data["sponsorsListing"] ? SponsorsListing.fromJS(_data["sponsorsListing"]) : <any>undefined;
            this.teamsResourcePath = _data["teamsResourcePath"];
            this.teamsUrl = _data["teamsUrl"];
            this.twitterUsername = _data["twitterUsername"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.url = _data["url"];
            this.viewerCanAdminister = _data["viewerCanAdminister"];
            this.viewerCanChangePinnedItems = _data["viewerCanChangePinnedItems"];
            this.viewerCanCreateProjects = _data["viewerCanCreateProjects"];
            this.viewerCanCreateRepositories = _data["viewerCanCreateRepositories"];
            this.viewerCanCreateTeams = _data["viewerCanCreateTeams"];
            this.viewerIsAMember = _data["viewerIsAMember"];
            this.websiteUrl = _data["websiteUrl"];
        }
    }

    static fromJS(data: any): Organization {
        data = typeof data === 'object' ? data : {};
        let result = new Organization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["databaseId"] = this.databaseId;
        data["description"] = this.description;
        data["descriptionHTML"] = this.descriptionHTML;
        data["email"] = this.email;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["ipAllowListEnabledSetting"] = this.ipAllowListEnabledSetting;
        data["isVerified"] = this.isVerified;
        data["itemShowcase"] = this.itemShowcase ? this.itemShowcase.toJSON() : <any>undefined;
        data["location"] = this.location;
        data["login"] = this.login;
        data["name"] = this.name;
        data["newTeamResourcePath"] = this.newTeamResourcePath;
        data["newTeamUrl"] = this.newTeamUrl;
        data["organizationBillingEmail"] = this.organizationBillingEmail;
        data["pinnedItemsRemaining"] = this.pinnedItemsRemaining;
        data["projectsResourcePath"] = this.projectsResourcePath;
        data["projectsUrl"] = this.projectsUrl;
        data["requiresTwoFactorAuthentication"] = this.requiresTwoFactorAuthentication;
        data["resourcePath"] = this.resourcePath;
        data["samlIdentityProvider"] = this.samlIdentityProvider ? this.samlIdentityProvider.toJSON() : <any>undefined;
        data["sponsorsListing"] = this.sponsorsListing ? this.sponsorsListing.toJSON() : <any>undefined;
        data["teamsResourcePath"] = this.teamsResourcePath;
        data["teamsUrl"] = this.teamsUrl;
        data["twitterUsername"] = this.twitterUsername;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["url"] = this.url;
        data["viewerCanAdminister"] = this.viewerCanAdminister;
        data["viewerCanChangePinnedItems"] = this.viewerCanChangePinnedItems;
        data["viewerCanCreateProjects"] = this.viewerCanCreateProjects;
        data["viewerCanCreateRepositories"] = this.viewerCanCreateRepositories;
        data["viewerCanCreateTeams"] = this.viewerCanCreateTeams;
        data["viewerIsAMember"] = this.viewerIsAMember;
        data["websiteUrl"] = this.websiteUrl;
        super.toJSON(data);
        return data; 
    }
}

export interface IOrganization extends IQueryableValueOfOrganization {
    createdAt?: Date;
    databaseId?: number | undefined;
    description?: string | undefined;
    descriptionHTML?: string | undefined;
    email?: string | undefined;
    id?: ID;
    ipAllowListEnabledSetting?: IpAllowListEnabledSettingValue;
    isVerified?: boolean;
    itemShowcase?: ProfileItemShowcase | undefined;
    location?: string | undefined;
    login?: string | undefined;
    name?: string | undefined;
    newTeamResourcePath?: string | undefined;
    newTeamUrl?: string | undefined;
    organizationBillingEmail?: string | undefined;
    pinnedItemsRemaining?: number;
    projectsResourcePath?: string | undefined;
    projectsUrl?: string | undefined;
    requiresTwoFactorAuthentication?: boolean | undefined;
    resourcePath?: string | undefined;
    samlIdentityProvider?: OrganizationIdentityProvider | undefined;
    sponsorsListing?: SponsorsListing | undefined;
    teamsResourcePath?: string | undefined;
    teamsUrl?: string | undefined;
    twitterUsername?: string | undefined;
    updatedAt?: Date;
    url?: string | undefined;
    viewerCanAdminister?: boolean;
    viewerCanChangePinnedItems?: boolean;
    viewerCanCreateProjects?: boolean;
    viewerCanCreateRepositories?: boolean;
    viewerCanCreateTeams?: boolean;
    viewerIsAMember?: boolean;
    websiteUrl?: string | undefined;
}

export enum IpAllowListEnabledSettingValue {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
}

export class QueryableValueOfOrganizationIdentityProvider implements IQueryableValueOfOrganizationIdentityProvider {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfOrganizationIdentityProvider) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfOrganizationIdentityProvider {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfOrganizationIdentityProvider();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfOrganizationIdentityProvider {
    expression?: Expression | undefined;
}

export class OrganizationIdentityProvider extends QueryableValueOfOrganizationIdentityProvider implements IOrganizationIdentityProvider {
    digestMethod?: string | undefined;
    id?: ID;
    idpCertificate?: string | undefined;
    issuer?: string | undefined;
    organization?: Organization | undefined;
    signatureMethod?: string | undefined;
    ssoUrl?: string | undefined;

    constructor(data?: IOrganizationIdentityProvider) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.digestMethod = _data["digestMethod"];
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.idpCertificate = _data["idpCertificate"];
            this.issuer = _data["issuer"];
            this.organization = _data["organization"] ? Organization.fromJS(_data["organization"]) : <any>undefined;
            this.signatureMethod = _data["signatureMethod"];
            this.ssoUrl = _data["ssoUrl"];
        }
    }

    static fromJS(data: any): OrganizationIdentityProvider {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationIdentityProvider();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["digestMethod"] = this.digestMethod;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["idpCertificate"] = this.idpCertificate;
        data["issuer"] = this.issuer;
        data["organization"] = this.organization ? this.organization.toJSON() : <any>undefined;
        data["signatureMethod"] = this.signatureMethod;
        data["ssoUrl"] = this.ssoUrl;
        super.toJSON(data);
        return data; 
    }
}

export interface IOrganizationIdentityProvider extends IQueryableValueOfOrganizationIdentityProvider {
    digestMethod?: string | undefined;
    id?: ID;
    idpCertificate?: string | undefined;
    issuer?: string | undefined;
    organization?: Organization | undefined;
    signatureMethod?: string | undefined;
    ssoUrl?: string | undefined;
}

export class QueryableValueOfRepository implements IQueryableValueOfRepository {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfRepository) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfRepository {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfRepository();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfRepository {
    expression?: Expression | undefined;
}

export class Repository extends QueryableValueOfRepository implements IRepository {
    codeOfConduct?: CodeOfConduct | undefined;
    createdAt?: Date;
    databaseId?: number | undefined;
    defaultBranchRef?: Ref | undefined;
    deleteBranchOnMerge?: boolean;
    description?: string | undefined;
    descriptionHTML?: string | undefined;
    diskUsage?: number | undefined;
    forkCount?: number;
    fundingLinks?: IQueryableListOfFundingLink | undefined;
    hasIssuesEnabled?: boolean;
    hasProjectsEnabled?: boolean;
    hasWikiEnabled?: boolean;
    homepageUrl?: string | undefined;
    id?: ID;
    isArchived?: boolean;
    isDisabled?: boolean;
    isEmpty?: boolean;
    isFork?: boolean;
    isLocked?: boolean;
    isMirror?: boolean;
    isPrivate?: boolean;
    isTemplate?: boolean;
    licenseInfo?: License | undefined;
    lockReason?: RepositoryLockReason | undefined;
    mergeCommitAllowed?: boolean;
    mirrorUrl?: string | undefined;
    name?: string | undefined;
    nameWithOwner?: string | undefined;
    openGraphImageUrl?: string | undefined;
    owner?: IRepositoryOwner | undefined;
    parent?: Repository | undefined;
    primaryLanguage?: Language | undefined;
    projectsResourcePath?: string | undefined;
    projectsUrl?: string | undefined;
    pushedAt?: Date | undefined;
    rebaseMergeAllowed?: boolean;
    resourcePath?: string | undefined;
    squashMergeAllowed?: boolean;
    sshUrl?: string | undefined;
    tempCloneToken?: string | undefined;
    templateRepository?: Repository | undefined;
    updatedAt?: Date;
    url?: string | undefined;
    usesCustomOpenGraphImage?: boolean;
    viewerCanAdminister?: boolean;
    viewerCanCreateProjects?: boolean;
    viewerCanSubscribe?: boolean;
    viewerCanUpdateTopics?: boolean;
    viewerDefaultCommitEmail?: string | undefined;
    viewerDefaultMergeMethod?: PullRequestMergeMethod;
    viewerHasStarred?: boolean;
    viewerPermission?: RepositoryPermission | undefined;
    viewerPossibleCommitEmails?: string[] | undefined;
    viewerSubscription?: SubscriptionState | undefined;

    constructor(data?: IRepository) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.codeOfConduct = _data["codeOfConduct"] ? CodeOfConduct.fromJS(_data["codeOfConduct"]) : <any>undefined;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.databaseId = _data["databaseId"];
            this.defaultBranchRef = _data["defaultBranchRef"] ? Ref.fromJS(_data["defaultBranchRef"]) : <any>undefined;
            this.deleteBranchOnMerge = _data["deleteBranchOnMerge"];
            this.description = _data["description"];
            this.descriptionHTML = _data["descriptionHTML"];
            this.diskUsage = _data["diskUsage"];
            this.forkCount = _data["forkCount"];
            this.fundingLinks = _data["fundingLinks"] ? IQueryableListOfFundingLink.fromJS(_data["fundingLinks"]) : <any>undefined;
            this.hasIssuesEnabled = _data["hasIssuesEnabled"];
            this.hasProjectsEnabled = _data["hasProjectsEnabled"];
            this.hasWikiEnabled = _data["hasWikiEnabled"];
            this.homepageUrl = _data["homepageUrl"];
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.isArchived = _data["isArchived"];
            this.isDisabled = _data["isDisabled"];
            this.isEmpty = _data["isEmpty"];
            this.isFork = _data["isFork"];
            this.isLocked = _data["isLocked"];
            this.isMirror = _data["isMirror"];
            this.isPrivate = _data["isPrivate"];
            this.isTemplate = _data["isTemplate"];
            this.licenseInfo = _data["licenseInfo"] ? License.fromJS(_data["licenseInfo"]) : <any>undefined;
            this.lockReason = _data["lockReason"];
            this.mergeCommitAllowed = _data["mergeCommitAllowed"];
            this.mirrorUrl = _data["mirrorUrl"];
            this.name = _data["name"];
            this.nameWithOwner = _data["nameWithOwner"];
            this.openGraphImageUrl = _data["openGraphImageUrl"];
            this.owner = _data["owner"] ? IRepositoryOwner.fromJS(_data["owner"]) : <any>undefined;
            this.parent = _data["parent"] ? Repository.fromJS(_data["parent"]) : <any>undefined;
            this.primaryLanguage = _data["primaryLanguage"] ? Language.fromJS(_data["primaryLanguage"]) : <any>undefined;
            this.projectsResourcePath = _data["projectsResourcePath"];
            this.projectsUrl = _data["projectsUrl"];
            this.pushedAt = _data["pushedAt"] ? new Date(_data["pushedAt"].toString()) : <any>undefined;
            this.rebaseMergeAllowed = _data["rebaseMergeAllowed"];
            this.resourcePath = _data["resourcePath"];
            this.squashMergeAllowed = _data["squashMergeAllowed"];
            this.sshUrl = _data["sshUrl"];
            this.tempCloneToken = _data["tempCloneToken"];
            this.templateRepository = _data["templateRepository"] ? Repository.fromJS(_data["templateRepository"]) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.url = _data["url"];
            this.usesCustomOpenGraphImage = _data["usesCustomOpenGraphImage"];
            this.viewerCanAdminister = _data["viewerCanAdminister"];
            this.viewerCanCreateProjects = _data["viewerCanCreateProjects"];
            this.viewerCanSubscribe = _data["viewerCanSubscribe"];
            this.viewerCanUpdateTopics = _data["viewerCanUpdateTopics"];
            this.viewerDefaultCommitEmail = _data["viewerDefaultCommitEmail"];
            this.viewerDefaultMergeMethod = _data["viewerDefaultMergeMethod"];
            this.viewerHasStarred = _data["viewerHasStarred"];
            this.viewerPermission = _data["viewerPermission"];
            if (Array.isArray(_data["viewerPossibleCommitEmails"])) {
                this.viewerPossibleCommitEmails = [] as any;
                for (let item of _data["viewerPossibleCommitEmails"])
                    this.viewerPossibleCommitEmails!.push(item);
            }
            this.viewerSubscription = _data["viewerSubscription"];
        }
    }

    static fromJS(data: any): Repository {
        data = typeof data === 'object' ? data : {};
        let result = new Repository();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["codeOfConduct"] = this.codeOfConduct ? this.codeOfConduct.toJSON() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["databaseId"] = this.databaseId;
        data["defaultBranchRef"] = this.defaultBranchRef ? this.defaultBranchRef.toJSON() : <any>undefined;
        data["deleteBranchOnMerge"] = this.deleteBranchOnMerge;
        data["description"] = this.description;
        data["descriptionHTML"] = this.descriptionHTML;
        data["diskUsage"] = this.diskUsage;
        data["forkCount"] = this.forkCount;
        data["fundingLinks"] = this.fundingLinks ? this.fundingLinks.toJSON() : <any>undefined;
        data["hasIssuesEnabled"] = this.hasIssuesEnabled;
        data["hasProjectsEnabled"] = this.hasProjectsEnabled;
        data["hasWikiEnabled"] = this.hasWikiEnabled;
        data["homepageUrl"] = this.homepageUrl;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["isArchived"] = this.isArchived;
        data["isDisabled"] = this.isDisabled;
        data["isEmpty"] = this.isEmpty;
        data["isFork"] = this.isFork;
        data["isLocked"] = this.isLocked;
        data["isMirror"] = this.isMirror;
        data["isPrivate"] = this.isPrivate;
        data["isTemplate"] = this.isTemplate;
        data["licenseInfo"] = this.licenseInfo ? this.licenseInfo.toJSON() : <any>undefined;
        data["lockReason"] = this.lockReason;
        data["mergeCommitAllowed"] = this.mergeCommitAllowed;
        data["mirrorUrl"] = this.mirrorUrl;
        data["name"] = this.name;
        data["nameWithOwner"] = this.nameWithOwner;
        data["openGraphImageUrl"] = this.openGraphImageUrl;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        data["primaryLanguage"] = this.primaryLanguage ? this.primaryLanguage.toJSON() : <any>undefined;
        data["projectsResourcePath"] = this.projectsResourcePath;
        data["projectsUrl"] = this.projectsUrl;
        data["pushedAt"] = this.pushedAt ? this.pushedAt.toISOString() : <any>undefined;
        data["rebaseMergeAllowed"] = this.rebaseMergeAllowed;
        data["resourcePath"] = this.resourcePath;
        data["squashMergeAllowed"] = this.squashMergeAllowed;
        data["sshUrl"] = this.sshUrl;
        data["tempCloneToken"] = this.tempCloneToken;
        data["templateRepository"] = this.templateRepository ? this.templateRepository.toJSON() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["url"] = this.url;
        data["usesCustomOpenGraphImage"] = this.usesCustomOpenGraphImage;
        data["viewerCanAdminister"] = this.viewerCanAdminister;
        data["viewerCanCreateProjects"] = this.viewerCanCreateProjects;
        data["viewerCanSubscribe"] = this.viewerCanSubscribe;
        data["viewerCanUpdateTopics"] = this.viewerCanUpdateTopics;
        data["viewerDefaultCommitEmail"] = this.viewerDefaultCommitEmail;
        data["viewerDefaultMergeMethod"] = this.viewerDefaultMergeMethod;
        data["viewerHasStarred"] = this.viewerHasStarred;
        data["viewerPermission"] = this.viewerPermission;
        if (Array.isArray(this.viewerPossibleCommitEmails)) {
            data["viewerPossibleCommitEmails"] = [];
            for (let item of this.viewerPossibleCommitEmails)
                data["viewerPossibleCommitEmails"].push(item);
        }
        data["viewerSubscription"] = this.viewerSubscription;
        super.toJSON(data);
        return data; 
    }
}

export interface IRepository extends IQueryableValueOfRepository {
    codeOfConduct?: CodeOfConduct | undefined;
    createdAt?: Date;
    databaseId?: number | undefined;
    defaultBranchRef?: Ref | undefined;
    deleteBranchOnMerge?: boolean;
    description?: string | undefined;
    descriptionHTML?: string | undefined;
    diskUsage?: number | undefined;
    forkCount?: number;
    fundingLinks?: IQueryableListOfFundingLink | undefined;
    hasIssuesEnabled?: boolean;
    hasProjectsEnabled?: boolean;
    hasWikiEnabled?: boolean;
    homepageUrl?: string | undefined;
    id?: ID;
    isArchived?: boolean;
    isDisabled?: boolean;
    isEmpty?: boolean;
    isFork?: boolean;
    isLocked?: boolean;
    isMirror?: boolean;
    isPrivate?: boolean;
    isTemplate?: boolean;
    licenseInfo?: License | undefined;
    lockReason?: RepositoryLockReason | undefined;
    mergeCommitAllowed?: boolean;
    mirrorUrl?: string | undefined;
    name?: string | undefined;
    nameWithOwner?: string | undefined;
    openGraphImageUrl?: string | undefined;
    owner?: IRepositoryOwner | undefined;
    parent?: Repository | undefined;
    primaryLanguage?: Language | undefined;
    projectsResourcePath?: string | undefined;
    projectsUrl?: string | undefined;
    pushedAt?: Date | undefined;
    rebaseMergeAllowed?: boolean;
    resourcePath?: string | undefined;
    squashMergeAllowed?: boolean;
    sshUrl?: string | undefined;
    tempCloneToken?: string | undefined;
    templateRepository?: Repository | undefined;
    updatedAt?: Date;
    url?: string | undefined;
    usesCustomOpenGraphImage?: boolean;
    viewerCanAdminister?: boolean;
    viewerCanCreateProjects?: boolean;
    viewerCanSubscribe?: boolean;
    viewerCanUpdateTopics?: boolean;
    viewerDefaultCommitEmail?: string | undefined;
    viewerDefaultMergeMethod?: PullRequestMergeMethod;
    viewerHasStarred?: boolean;
    viewerPermission?: RepositoryPermission | undefined;
    viewerPossibleCommitEmails?: string[] | undefined;
    viewerSubscription?: SubscriptionState | undefined;
}

export class QueryableValueOfCodeOfConduct implements IQueryableValueOfCodeOfConduct {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfCodeOfConduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfCodeOfConduct {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfCodeOfConduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfCodeOfConduct {
    expression?: Expression | undefined;
}

export class CodeOfConduct extends QueryableValueOfCodeOfConduct implements ICodeOfConduct {
    body?: string | undefined;
    id?: ID;
    key?: string | undefined;
    name?: string | undefined;
    resourcePath?: string | undefined;
    url?: string | undefined;

    constructor(data?: ICodeOfConduct) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.body = _data["body"];
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.key = _data["key"];
            this.name = _data["name"];
            this.resourcePath = _data["resourcePath"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): CodeOfConduct {
        data = typeof data === 'object' ? data : {};
        let result = new CodeOfConduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["key"] = this.key;
        data["name"] = this.name;
        data["resourcePath"] = this.resourcePath;
        data["url"] = this.url;
        super.toJSON(data);
        return data; 
    }
}

export interface ICodeOfConduct extends IQueryableValueOfCodeOfConduct {
    body?: string | undefined;
    id?: ID;
    key?: string | undefined;
    name?: string | undefined;
    resourcePath?: string | undefined;
    url?: string | undefined;
}

export class QueryableValueOfRef implements IQueryableValueOfRef {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfRef) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfRef {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfRef();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfRef {
    expression?: Expression | undefined;
}

export class Ref extends QueryableValueOfRef implements IRef {
    id?: ID;
    name?: string | undefined;
    prefix?: string | undefined;
    repository?: Repository | undefined;
    target?: IGitObject | undefined;

    constructor(data?: IRef) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.name = _data["name"];
            this.prefix = _data["prefix"];
            this.repository = _data["repository"] ? Repository.fromJS(_data["repository"]) : <any>undefined;
            this.target = _data["target"] ? IGitObject.fromJS(_data["target"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Ref {
        data = typeof data === 'object' ? data : {};
        let result = new Ref();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["prefix"] = this.prefix;
        data["repository"] = this.repository ? this.repository.toJSON() : <any>undefined;
        data["target"] = this.target ? this.target.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRef extends IQueryableValueOfRef {
    id?: ID;
    name?: string | undefined;
    prefix?: string | undefined;
    repository?: Repository | undefined;
    target?: IGitObject | undefined;
}

export abstract class IGitObject implements IIGitObject {
    abbreviatedOid?: string | undefined;
    commitResourcePath?: string | undefined;
    commitUrl?: string | undefined;
    id?: ID;
    oid?: string | undefined;
    repository?: Repository | undefined;

    constructor(data?: IIGitObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.abbreviatedOid = _data["abbreviatedOid"];
            this.commitResourcePath = _data["commitResourcePath"];
            this.commitUrl = _data["commitUrl"];
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.oid = _data["oid"];
            this.repository = _data["repository"] ? Repository.fromJS(_data["repository"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IGitObject {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IGitObject' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["abbreviatedOid"] = this.abbreviatedOid;
        data["commitResourcePath"] = this.commitResourcePath;
        data["commitUrl"] = this.commitUrl;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["oid"] = this.oid;
        data["repository"] = this.repository ? this.repository.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIGitObject {
    abbreviatedOid?: string | undefined;
    commitResourcePath?: string | undefined;
    commitUrl?: string | undefined;
    id?: ID;
    oid?: string | undefined;
    repository?: Repository | undefined;
}

export abstract class IQueryableListOfFundingLink implements IIQueryableListOfFundingLink {

    constructor(data?: IIQueryableListOfFundingLink) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IQueryableListOfFundingLink {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IQueryableListOfFundingLink' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IIQueryableListOfFundingLink {
}

export class QueryableValueOfLicense implements IQueryableValueOfLicense {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfLicense) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfLicense {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfLicense();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfLicense {
    expression?: Expression | undefined;
}

export class License extends QueryableValueOfLicense implements ILicense {
    body?: string | undefined;
    conditions?: IQueryableListOfLicenseRule | undefined;
    description?: string | undefined;
    featured?: boolean;
    hidden?: boolean;
    id?: ID;
    implementation?: string | undefined;
    key?: string | undefined;
    limitations?: IQueryableListOfLicenseRule | undefined;
    name?: string | undefined;
    nickname?: string | undefined;
    permissions?: IQueryableListOfLicenseRule | undefined;
    pseudoLicense?: boolean;
    spdxId?: string | undefined;
    url?: string | undefined;

    constructor(data?: ILicense) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.body = _data["body"];
            this.conditions = _data["conditions"] ? IQueryableListOfLicenseRule.fromJS(_data["conditions"]) : <any>undefined;
            this.description = _data["description"];
            this.featured = _data["featured"];
            this.hidden = _data["hidden"];
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.implementation = _data["implementation"];
            this.key = _data["key"];
            this.limitations = _data["limitations"] ? IQueryableListOfLicenseRule.fromJS(_data["limitations"]) : <any>undefined;
            this.name = _data["name"];
            this.nickname = _data["nickname"];
            this.permissions = _data["permissions"] ? IQueryableListOfLicenseRule.fromJS(_data["permissions"]) : <any>undefined;
            this.pseudoLicense = _data["pseudoLicense"];
            this.spdxId = _data["spdxId"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): License {
        data = typeof data === 'object' ? data : {};
        let result = new License();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body;
        data["conditions"] = this.conditions ? this.conditions.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["featured"] = this.featured;
        data["hidden"] = this.hidden;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["implementation"] = this.implementation;
        data["key"] = this.key;
        data["limitations"] = this.limitations ? this.limitations.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["nickname"] = this.nickname;
        data["permissions"] = this.permissions ? this.permissions.toJSON() : <any>undefined;
        data["pseudoLicense"] = this.pseudoLicense;
        data["spdxId"] = this.spdxId;
        data["url"] = this.url;
        super.toJSON(data);
        return data; 
    }
}

export interface ILicense extends IQueryableValueOfLicense {
    body?: string | undefined;
    conditions?: IQueryableListOfLicenseRule | undefined;
    description?: string | undefined;
    featured?: boolean;
    hidden?: boolean;
    id?: ID;
    implementation?: string | undefined;
    key?: string | undefined;
    limitations?: IQueryableListOfLicenseRule | undefined;
    name?: string | undefined;
    nickname?: string | undefined;
    permissions?: IQueryableListOfLicenseRule | undefined;
    pseudoLicense?: boolean;
    spdxId?: string | undefined;
    url?: string | undefined;
}

export abstract class IQueryableListOfLicenseRule implements IIQueryableListOfLicenseRule {

    constructor(data?: IIQueryableListOfLicenseRule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IQueryableListOfLicenseRule {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IQueryableListOfLicenseRule' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IIQueryableListOfLicenseRule {
}

export enum RepositoryLockReason {
    Moving = "MOVING",
    Billing = "BILLING",
    Rename = "RENAME",
    Migrating = "MIGRATING",
}

export abstract class IRepositoryOwner implements IIRepositoryOwner {
    id?: ID;
    login?: string | undefined;
    resourcePath?: string | undefined;
    url?: string | undefined;

    constructor(data?: IIRepositoryOwner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.login = _data["login"];
            this.resourcePath = _data["resourcePath"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): IRepositoryOwner {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IRepositoryOwner' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["login"] = this.login;
        data["resourcePath"] = this.resourcePath;
        data["url"] = this.url;
        return data; 
    }
}

export interface IIRepositoryOwner {
    id?: ID;
    login?: string | undefined;
    resourcePath?: string | undefined;
    url?: string | undefined;
}

export class QueryableValueOfLanguage implements IQueryableValueOfLanguage {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfLanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfLanguage {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfLanguage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfLanguage {
    expression?: Expression | undefined;
}

export class Language extends QueryableValueOfLanguage implements ILanguage {
    color?: string | undefined;
    id?: ID;
    name?: string | undefined;

    constructor(data?: ILanguage) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.color = _data["color"];
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Language {
        data = typeof data === 'object' ? data : {};
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["color"] = this.color;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["name"] = this.name;
        super.toJSON(data);
        return data; 
    }
}

export interface ILanguage extends IQueryableValueOfLanguage {
    color?: string | undefined;
    id?: ID;
    name?: string | undefined;
}

export enum PullRequestMergeMethod {
    Merge = "MERGE",
    Squash = "SQUASH",
    Rebase = "REBASE",
}

export enum RepositoryPermission {
    Admin = "ADMIN",
    Maintain = "MAINTAIN",
    Write = "WRITE",
    Triage = "TRIAGE",
    Read = "READ",
}

export enum SubscriptionState {
    Unsubscribed = "UNSUBSCRIBED",
    Subscribed = "SUBSCRIBED",
    Ignored = "IGNORED",
}

export abstract class IGitSignature implements IIGitSignature {
    email?: string | undefined;
    isValid?: boolean;
    payload?: string | undefined;
    signature?: string | undefined;
    signer?: User2 | undefined;
    state?: GitSignatureState;
    wasSignedByGitHub?: boolean;

    constructor(data?: IIGitSignature) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.isValid = _data["isValid"];
            this.payload = _data["payload"];
            this.signature = _data["signature"];
            this.signer = _data["signer"] ? User2.fromJS(_data["signer"]) : <any>undefined;
            this.state = _data["state"];
            this.wasSignedByGitHub = _data["wasSignedByGitHub"];
        }
    }

    static fromJS(data: any): IGitSignature {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IGitSignature' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["isValid"] = this.isValid;
        data["payload"] = this.payload;
        data["signature"] = this.signature;
        data["signer"] = this.signer ? this.signer.toJSON() : <any>undefined;
        data["state"] = this.state;
        data["wasSignedByGitHub"] = this.wasSignedByGitHub;
        return data; 
    }
}

export interface IIGitSignature {
    email?: string | undefined;
    isValid?: boolean;
    payload?: string | undefined;
    signature?: string | undefined;
    signer?: User2 | undefined;
    state?: GitSignatureState;
    wasSignedByGitHub?: boolean;
}

export enum GitSignatureState {
    Valid = "VALID",
    Invalid = "INVALID",
    MalformedSig = "MALFORMED_SIG",
    UnknownKey = "UNKNOWN_KEY",
    BadEmail = "BAD_EMAIL",
    UnverifiedEmail = "UNVERIFIED_EMAIL",
    NoUser = "NO_USER",
    UnknownSigType = "UNKNOWN_SIG_TYPE",
    Unsigned = "UNSIGNED",
    GpgverifyUnavailable = "GPGVERIFY_UNAVAILABLE",
    GpgverifyError = "GPGVERIFY_ERROR",
    NotSigningKey = "NOT_SIGNING_KEY",
    ExpiredKey = "EXPIRED_KEY",
    OcspPending = "OCSP_PENDING",
    OcspError = "OCSP_ERROR",
    BadCert = "BAD_CERT",
    OcspRevoked = "OCSP_REVOKED",
}

export class QueryableValueOfStatus implements IQueryableValueOfStatus {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfStatus {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfStatus {
    expression?: Expression | undefined;
}

export class Status extends QueryableValueOfStatus implements IStatus {
    commit?: Commit | undefined;
    contexts?: IQueryableListOfStatusContext | undefined;
    id?: ID;
    state?: StatusState;

    constructor(data?: IStatus) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.commit = _data["commit"] ? Commit.fromJS(_data["commit"]) : <any>undefined;
            this.contexts = _data["contexts"] ? IQueryableListOfStatusContext.fromJS(_data["contexts"]) : <any>undefined;
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): Status {
        data = typeof data === 'object' ? data : {};
        let result = new Status();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commit"] = this.commit ? this.commit.toJSON() : <any>undefined;
        data["contexts"] = this.contexts ? this.contexts.toJSON() : <any>undefined;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["state"] = this.state;
        super.toJSON(data);
        return data; 
    }
}

export interface IStatus extends IQueryableValueOfStatus {
    commit?: Commit | undefined;
    contexts?: IQueryableListOfStatusContext | undefined;
    id?: ID;
    state?: StatusState;
}

export abstract class IQueryableListOfStatusContext implements IIQueryableListOfStatusContext {

    constructor(data?: IIQueryableListOfStatusContext) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IQueryableListOfStatusContext {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IQueryableListOfStatusContext' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IIQueryableListOfStatusContext {
}

export enum StatusState {
    Expected = "EXPECTED",
    Error = "ERROR",
    Failure = "FAILURE",
    Pending = "PENDING",
    Success = "SUCCESS",
}

export class QueryableValueOfStatusCheckRollup implements IQueryableValueOfStatusCheckRollup {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfStatusCheckRollup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfStatusCheckRollup {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfStatusCheckRollup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfStatusCheckRollup {
    expression?: Expression | undefined;
}

export class StatusCheckRollup extends QueryableValueOfStatusCheckRollup implements IStatusCheckRollup {
    commit?: Commit | undefined;
    id?: ID;
    state?: StatusState;

    constructor(data?: IStatusCheckRollup) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.commit = _data["commit"] ? Commit.fromJS(_data["commit"]) : <any>undefined;
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): StatusCheckRollup {
        data = typeof data === 'object' ? data : {};
        let result = new StatusCheckRollup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commit"] = this.commit ? this.commit.toJSON() : <any>undefined;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["state"] = this.state;
        super.toJSON(data);
        return data; 
    }
}

export interface IStatusCheckRollup extends IQueryableValueOfStatusCheckRollup {
    commit?: Commit | undefined;
    id?: ID;
    state?: StatusState;
}

export class QueryableValueOfTree implements IQueryableValueOfTree {
    expression?: Expression | undefined;

    constructor(data?: IQueryableValueOfTree) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expression = _data["expression"] ? Expression.fromJS(_data["expression"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryableValueOfTree {
        data = typeof data === 'object' ? data : {};
        let result = new QueryableValueOfTree();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression ? this.expression.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQueryableValueOfTree {
    expression?: Expression | undefined;
}

export class Tree extends QueryableValueOfTree implements ITree {
    abbreviatedOid?: string | undefined;
    commitResourcePath?: string | undefined;
    commitUrl?: string | undefined;
    entries?: IQueryableListOfTreeEntry | undefined;
    id?: ID;
    oid?: string | undefined;
    repository?: Repository | undefined;

    constructor(data?: ITree) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.abbreviatedOid = _data["abbreviatedOid"];
            this.commitResourcePath = _data["commitResourcePath"];
            this.commitUrl = _data["commitUrl"];
            this.entries = _data["entries"] ? IQueryableListOfTreeEntry.fromJS(_data["entries"]) : <any>undefined;
            this.id = _data["id"] ? ID.fromJS(_data["id"]) : <any>undefined;
            this.oid = _data["oid"];
            this.repository = _data["repository"] ? Repository.fromJS(_data["repository"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Tree {
        data = typeof data === 'object' ? data : {};
        let result = new Tree();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["abbreviatedOid"] = this.abbreviatedOid;
        data["commitResourcePath"] = this.commitResourcePath;
        data["commitUrl"] = this.commitUrl;
        data["entries"] = this.entries ? this.entries.toJSON() : <any>undefined;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["oid"] = this.oid;
        data["repository"] = this.repository ? this.repository.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ITree extends IQueryableValueOfTree {
    abbreviatedOid?: string | undefined;
    commitResourcePath?: string | undefined;
    commitUrl?: string | undefined;
    entries?: IQueryableListOfTreeEntry | undefined;
    id?: ID;
    oid?: string | undefined;
    repository?: Repository | undefined;
}

export abstract class IQueryableListOfTreeEntry implements IIQueryableListOfTreeEntry {

    constructor(data?: IIQueryableListOfTreeEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IQueryableListOfTreeEntry {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IQueryableListOfTreeEntry' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IIQueryableListOfTreeEntry {
}

export enum RepoFilterOptions {
    All = 1,
    Owned = 2,
    ContributedNotOwned = 3,
}

export class ClientMetadata implements IClientMetadata {
    page?: string | undefined;
    referrer?: string | undefined;
    browserName?: string | undefined;
    browserEngine?: string | undefined;
    browserLanguage?: string | undefined;
    cookiesEnabled?: boolean;

    constructor(data?: IClientMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.referrer = _data["referrer"];
            this.browserName = _data["browserName"];
            this.browserEngine = _data["browserEngine"];
            this.browserLanguage = _data["browserLanguage"];
            this.cookiesEnabled = _data["cookiesEnabled"];
        }
    }

    static fromJS(data: any): ClientMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new ClientMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["referrer"] = this.referrer;
        data["browserName"] = this.browserName;
        data["browserEngine"] = this.browserEngine;
        data["browserLanguage"] = this.browserLanguage;
        data["cookiesEnabled"] = this.cookiesEnabled;
        return data; 
    }
}

export interface IClientMetadata {
    page?: string | undefined;
    referrer?: string | undefined;
    browserName?: string | undefined;
    browserEngine?: string | undefined;
    browserLanguage?: string | undefined;
    cookiesEnabled?: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}